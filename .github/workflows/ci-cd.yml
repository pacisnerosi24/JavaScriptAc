name: CI/CD Pipeline with Docker and EC2 (No Docker Hub)

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout del código
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Configurar Docker en GitHub Actions
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 3. Construir la imagen Docker localmente
      - name: Build Docker image
        run: |
          docker build -t my-calculator-app .

      # 4. Guardar la imagen Docker y transferirla a EC2 usando SCP
      - name: Save SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > /tmp/ec2_key.pem
          chmod 600 /tmp/ec2_key.pem

      - name: Add EC2 to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Save and transfer Docker image to EC2
        run: |
          # Guardar la imagen Docker y comprimirla
          docker save my-calculator-app | gzip > my-calculator-app.tar.gz
          
          # Transferir el archivo comprimido a EC2
          scp -i /tmp/ec2_key.pem my-calculator-app.tar.gz ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/tmp/

      # 5. Limpiar la clave SSH después de la transferencia
      - name: Clean up SSH key
        run: |
          rm /tmp/ec2_key.pem

      # 6. Desplegar la aplicación en EC2
      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i /tmp/ec2_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            # Detener y eliminar la aplicación anterior (si existe)
            docker stop my-calculator-app || true
            docker rm my-calculator-app || true

            # Cargar la nueva imagen
            docker load < /tmp/my-calculator-app.tar.gz

            # Ejecutar la nueva imagen
            docker run -d -p 80:80 --name my-calculator-app my-calculator-app
          EOF
